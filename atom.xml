<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-06-16T05:27:48.697Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Yangrushuai</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Cartographer学习笔记</title>
    <link href="http://example.com/2021/05/30/Cartographer/"/>
    <id>http://example.com/2021/05/30/Cartographer/</id>
    <published>2021-05-30T14:14:13.000Z</published>
    <updated>2021-06-16T05:27:48.697Z</updated>
    
    <content type="html"><![CDATA[<p>大二下刚开学和shl一起参加了航天创意物流比赛，刚开始想着两个人去试试水，随便玩一下，后来开学没多久，因为一起参加比赛的另一支队伍缺员，于是两队考虑合并，至此之后就开始有点团队合作来学习了。整个比赛分为好几个部分，我主要负责一些路径规划的东西，因为大二上的时候学过数据结构，做的比较快就开始做SLAM建图，第一次阅读工程代码，同时阅读英文技术文档，说实话还是挺有意思的，最近比较忙，分享一下我没整理的学习笔记。</p><p><strong>Cartographer.</strong></p><p>算法理解:如图所示，可以看到cartographer 主要分为两大部分，一个是用来建立一系列子图(submap)的Local SlAM，算法接受到由传感器从环境中获取的数据，经过Voxel Filter，Voxel Filter的功能是将原始点降采样为恒定大小的多维数据集并且仅保留每个多维数据集的质心进行（用以解决距离数据密度不均匀的问题）, 而Adaptive Voxel Filter顾名思义用来自适应Voxel Filter相关配置（例如voxel_filter_size），处理后的数据组合完毕并从多个范围数据中过滤掉后，就进入Local SLAM。Local SLAM通过使用PoseExtrapolator的初始猜测进行匹配，将新的数据插入其当前子图结构中。PoseExtrapolator背后的想法是使用测距仪之外的其他传感器的传感器数据来预测下一次扫描应插入到子图中的位置，并且，通过调用</p><p>Ceres Solver将寻找最佳匹配位置问题转化成最小二乘问题进行优化，得到一个更匹配的子图。同时在Global SIAM中，它通过对子图进行扫描匹配扫描查找循环闭合约束。当Local SLAM生成其连续的子图时，对子图数据集的全局优化任务在后台运行。它的作用是在彼此之间重新布置子图，以便它们形成一个连贯的全局图。例如，此优化负责更改当前构建的轨迹，以根据循环闭合正确地对齐子图。整个算法过程大致如上。</p><p><img src="Cartographer/clip_image001.png" alt="img"></p><p>由各部分执行的功能和参数含义可知，我们通过调整TRAJECTORY_BUILDER_nD.max_range（25～30）来增加传感器传入的数据量，因为在Input Sensor Data中Cartographer通过bandpass filter，将数据的范围值保持在一定的最小和最大范围之间，同时对TRAJECTORY_BUILDER_nD.*adaptive_voxel_filter.max_length和TRAJECTORY_BUILDER_nD.*adaptive_voxel_filter.min_num_points也进行调整以适应传感器的值（前者3～4之间，后者150左右效果更好），对Local SLAM可接收的数据范围也要进行调整（例如TRAJECTORY_BUILDER_nD.submaps.num_range_data）。在LocalSLAM的建图过程中（通过预先将Global SLAM的优化关闭，POSE_GRAPH.optimize_every_n_nodes = 0），发现图中的旋转效果并不佳，因此，在CeresScanMatcher的优化过程中，增大TRAJECTORY_BUILDER_nD.ceres_scan_matcher.rotation_weight对优化此效果颇佳。</p><p><img src="Cartographer/image-20210608222319213.png" alt="image-20210608222319213"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;大二下刚开学和shl一起参加了航天创意物流比赛，刚开始想着两个人去试试水，随便玩一下，后来开学没多久，因为一起参加比赛的另一支队伍缺员，于是两队考虑合并，至此之后就开始有点团队合作来学习了。整个比赛分为好几个部分，我主要负责一些路径规划的东西，因为大二上的时候学过数据结构，</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JavaNote</title>
    <link href="http://example.com/2021/05/20/JavaNote/"/>
    <id>http://example.com/2021/05/20/JavaNote/</id>
    <published>2021-05-20T05:01:10.000Z</published>
    <updated>2021-06-21T00:41:37.033Z</updated>
    
    <content type="html"><![CDATA[<p>Q: </p><ol><li>this 的用法</li><li>抛出异常 throw.</li><li>learning how to write spec</li><li>搞清楚什么时候用lists, maps,queues,sets.</li><li>如何返回范型的imultable</li><li>强制转换。会不会改变地址。multable？</li></ol><p><strong>技术：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Array.fill()方法：对一个数组进行填充:</span></span><br><span class="line"><span class="keyword">boolean</span>[] vis = <span class="keyword">new</span> <span class="keyword">boolean</span>[N * N + <span class="number">1</span>]; </span><br><span class="line">Arrays.fill(vis, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//public String trim()用于删除头尾空白符的字符串:</span></span><br><span class="line">String Str = <span class="keyword">new</span> String(<span class="string">&quot;    yrs    &quot;</span>);</span><br><span class="line">Str.trim();</span><br><span class="line"></span><br><span class="line"><span class="comment">//input : yrs</span></span><br><span class="line"><span class="comment">//output : yrs </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//直接抛出异常～</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;implement me!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Math 数学处理库，其中有abs,atan,PI...</span></span><br><span class="line"><span class="keyword">import</span> java.lang.Math;</span><br><span class="line">Math.abs();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//assert : </span></span><br><span class="line"> <span class="keyword">assert</span> flag; <span class="comment">// 判断flag 是否为真</span></span><br><span class="line"> <span class="keyword">assert</span> string != <span class="keyword">null</span> : <span class="string">&quot;string is null&quot;</span> <span class="comment">// 如果string 是null则抛出带有说明的异常。</span></span><br></pre></td></tr></table></figure><p>super 可以用来引用直接父类的实例变量。 super 可以用来调用直接父类方法。 super () 可以用于调用直接父类构造函数。 可以使用 super 关键字来访问父类的数据成员或字段。 如果父类和子类具有相同的字段，则使用 super 来指定为父类数据成员或字段。</p><p>线性表list<a href="https://www.w3cschool.cn/java/java-list.html">see</a> :注意一下NullPointerException，不能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Double&gt; <span class="title">calculateBearings</span><span class="params">(List&lt;Integer&gt; xCoords, List&lt;Integer&gt; yCoords)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  List&lt;Double&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>屏幕的打印和输和print 的区别</strong><a href="(https://blog.csdn.net/baidu_41666198/article/details/79942661)">see</a> </p><p>正则表达式的使用:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">String R = <span class="string">&quot;([1-9]+(|\\.5)|(0\\.5))&quot;</span>;</span><br><span class="line">String I1 = <span class="string">&quot;1.5&quot;</span>;</span><br><span class="line">String I2 = <span class="string">&quot;0.5&quot;</span>;</span><br><span class="line">String I3 = <span class="string">&quot;1.52&quot;</span>;</span><br><span class="line">String I4 = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">String I5 = <span class="string">&quot;.5&quot;</span>;</span><br><span class="line">String I6 = <span class="string">&quot;9.5&quot;</span>;</span><br><span class="line">String I7 = <span class="string">&quot;123.5&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//System.out.println(&quot;String&quot;.matches(rel)); well done</span></span><br><span class="line">System.out.println(Pattern.matches(R,I1));<span class="comment">//T</span></span><br><span class="line">System.out.println(Pattern.matches(R,I2));<span class="comment">//T</span></span><br><span class="line">System.out.println(Pattern.matches(R,I3));<span class="comment">//F</span></span><br><span class="line">System.out.println(Pattern.matches(R,I4));<span class="comment">//T</span></span><br><span class="line">System.out.println(Pattern.matches(R,I5));<span class="comment">//F</span></span><br><span class="line">System.out.println(Pattern.matches(R,I6));<span class="comment">//T</span></span><br><span class="line">System.out.println(Pattern.matches(R,I7));<span class="comment">//T</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//A ::= </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Note String.split() 应该处理正则表达式的特殊字符，比如：</span></span><br><span class="line"><span class="comment">// right :</span></span><br><span class="line">String[] names = value.split(<span class="string">&quot;//.&quot;</span>);</span><br><span class="line"><span class="comment">// error :</span></span><br><span class="line">String[] names = value.split(<span class="string">&quot;.&quot;</span>);</span><br></pre></td></tr></table></figure><p>Map 的用法<a href="https://www.runoob.com/java/java-map-interface.html">see</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map m = <span class="keyword">new</span> HashMap();</span><br></pre></td></tr></table></figure><p>打印数组：<a href="https://blog.csdn.net/lilong117194/article/details/83716244">打印二维数组</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String[] l = <span class="keyword">new</span> String[N];</span><br><span class="line">System.out.println(Arrays.toString(l));</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不能使用：不同于C. java判断temp&lt;0之后还是会执行appear[temp].</span></span><br><span class="line">temp &lt; <span class="number">0</span> &amp;&amp; appear[temp] </span><br></pre></td></tr></table></figure><p><strong>概念：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Java 中一般使用 new 来创建对象，它可以动态地为一个对象分配地址。它的通用格式如下：</span></span><br><span class="line">classname obj = <span class="keyword">new</span> classname( );</span><br><span class="line"><span class="comment">//其中，obj 是创建的对象，classname 是类的名字，类名后边的( )指明了类的构造方法。</span></span><br><span class="line"><span class="comment">//构造方法定义了当创建一个对象时要进行的操作。</span></span><br><span class="line"><span class="comment">//e.g 类名称 对象名称 = new 类名称 () -&gt; 引用类型 对象名称 = new 新建对象的名字&lt;确定范型&gt;(调用构造方法的参数)；</span></span><br><span class="line">String b = <span class="keyword">new</span> String(<span class="string">&quot;word&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//一个.java中一般是可以放多个类的，但是只能有一个用public修饰的类，</span></span><br><span class="line"><span class="comment">//并且public 修饰的class 的名字需要和java文件的名字相同（区分大小写）</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>抽象类</strong><a href="https://www.runoob.com/java/java-abstraction.html">see</a> ： </p><p>​        其中有一个：构造方法，类方法（用 static 修饰的方法）不能声明为抽象方法。</p><p>一个类只能继承一个抽象类，而一个类却可以实现多个接口:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ManWorker implements Workable, Feedable&#123;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;...&#125;;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;...&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用范型来支持不同类型的参数： Java的泛型是由编译器在编译时实行的，编译器内部永远把所有类型<code>T</code>视为<code>Object</code>处理，但是Obeject不能持有基本类型。</p><p><strong>public 和 static:</strong></p><p>​    通常，大多数方法都是public的,私有(private)方法只能被同一类中的其它方法调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//public 可以被外部用户访问：</span></span><br><span class="line"><span class="keyword">int</span> i = a.i;</span><br></pre></td></tr></table></figure><p>用static关键字修饰的字段称为静态字段 n 静态字段对类的每个实例都是共享的</p><p>可以用final关键字修饰一个实例字段，这种字段在构造对象时必须初始化<br>n 用final修饰的实例字段将不能再修改</p><p>对于static方法来说，static方法可以被类名对象进行调用，也可以在类中被其他方法调用。而非static方法只能先创建对象之后才能被对象调用。</p><p><strong>Java接口</strong>:</p><p><strong>什么是Junit</strong></p><hr><p>JUnit is a simple framework to write repeatable tests. It is an instance of the xUnit architecture for unit testing frameworks.</p><hr><p>eclipse 配置Junit <a href="https://blog.csdn.net/gzn00417/article/details/104163696">see</a>.</p><p>Set继承于Collection接口，是一个不允许出现重复元素，并且无序的集合，主要有HashSet和TreeSet两大实现类。</p><p><strong>Set</strong> <a href="https://www.jianshu.com/p/b48c47a42916">Java集合–Set(基础)</a></p><p>Set继承于Collection接口，是一个不允许出现重复元素，并且无序的集合，主要有HashSet和TreeSet两大实现类。</p><p>在判断重复元素的时候，Set集合会调用hashCode()和equals()方法来实现。</p><p>​    <strong>Note</strong> : 在自定义ADT时，需要重写Object 的equals，并且， == 是判断引用的相等，equals 判断的是字符串是否相等。</p><p>HashSet是哈希表结构，主要利用HashMap的key来存储元素，计算插入元素的hashCode来获取元素在集合中的位置；</p><p>TreeSet是红黑树结构，每一个元素都是树中的一个节点，插入的元素都会进行排序；</p><p><a href="https://blog.csdn.net/coding_1994/article/details/80553554">HashSet和TreeSet的区别_</a> </p><p><a href="https://blog.csdn.net/the_fool_/article/details/82389351">Set排序四种写法</a></p><hr><p>A <strong>concrete class</strong> is a class that has an implementation for all of its methods. They cannot have any unimplemented methods. It can also extend an <a href="https://www.geeksforgeeks.org/abstract-classes-in-java/">abstract class</a> or implement an <a href="https://www.geeksforgeeks.org/interfaces-in-java/">interface</a> as long as it implements all their methods. It is a complete class and can be instantiated.</p><hr><p><strong>new</strong>的含义和不同对象之间的比较问题:<a href="http://c.biancheng.net/view/6016.html">see</a>，同时涉及到multable与immultable.</p><p><a href="https://blog.csdn.net/qq_25077777/article/details/80174763">java中的null类型及注意事项</a></p><p><strong>Other refference:</strong></p><p>1.凸包问题： 给定平面上一堆点集，输出位于凸包上的点。</p><p>gift-wrapping algorithm.</p><p>Graham_Scan algorithm.</p><p>2.</p><hr><p>eclipse创建多工程的时候出现<a href="https://blog.csdn.net/jishu_vip/article/details/2617188?utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control">The input type of the launch configuration does not exist</a></p><p>两种类 ，</p><p>Graph&lt;String&gt; s tring范型.</p><p>代码覆盖度。AF RI</p><p>表暴露</p><p>参考网站与书籍：</p><ol><li>java核心技术</li><li><a href="https://www.liaoxuefeng.com/">廖雪峰的官方网站</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Q: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;this 的用法&lt;/li&gt;
&lt;li&gt;抛出异常 throw.&lt;/li&gt;
&lt;li&gt;learning how to write spec&lt;/li&gt;
&lt;li&gt;搞清楚什么时候用lists, maps,queues,sets.&lt;/li&gt;
&lt;li&gt;如何返</summary>
      
    
    
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Teach Me How to hexo</title>
    <link href="http://example.com/2021/05/17/hello-world/"/>
    <id>http://example.com/2021/05/17/hello-world/</id>
    <published>2021-05-17T08:28:00.684Z</published>
    <updated>2021-06-16T05:30:58.610Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="Address-some-problem"><a href="#Address-some-problem" class="headerlink" title="Address some problem"></a>Address some problem</h3><p>安装plugin需要在~下安装，例如：(base) yrs@rongshuijiebadeMacBook-Pro ~ % npm install hexo-renderer-marked/</p><h3 id="Insert-pictures-into-posts"><a href="#Insert-pictures-into-posts" class="headerlink" title="Insert pictures into posts."></a>Insert pictures into posts.</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
